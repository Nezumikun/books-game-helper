#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

const mongoose = require('mongoose')
mongoose.Promise = global.Promise
mongoose.connect('mongodb+srv://book-games:book-games@cluster-nezumikun-mxn3v.mongodb.net/book-games?retryWrites=true', {
  useNewUrlParser: true,
  useCreateIndex: true
})

mongoose.connection
  .once('open', function() {
    debug('Mongoose connected')
    const { User } = require('../models')
    const crypto = require('crypto')
    User.find({ login: 'root' }).exec((err, doc) => {
      // debug(err, doc)
      if (doc.length === 0) {
        debug('Root not found')
        let root = new User({
          login: 'root',
          passwordHash:  crypto.createHash('sha256')
            .update('password')
            .digest('hex'),
          description: 'Верховный администратор',
          canBeGameMaster: false,
          canCreateUsers: true
        })
        root.save((err) => {
          if (err) {
            console.error(err)
          } else {
            debug('Root saved')
            server.listen(port);
          }
        })
      }
      else {
        debug('Root found')
        server.listen(port);
      }
    })
  })


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
